import matplotlib.pyplot as plt
import numpy as np
import pickle

quadrature = ([940.421743283257, 232.4721702071631, 101.37926252008707, 55.50735779589889, 34.287083789476334, 22.772918289535248, 15.844083469383941, 11.361785349703583, 8.304499575034082, 6.134467068045229, 4.546894678149524, 3.3587545417947586, 2.454964145727859, 1.760453718820438, 1.2248221905664074, 0.8135067956272044, 0.502505915838047, 0.2751329509765546, 0.1199832893551186, 0.029659858318032407], [2222.9136223096393, 213.76284544879454, 74.2155005522821, 28.188544090145477, 15.570610164906084, 8.505796491202375, 5.569145111671948, 3.60865197943728, 2.5661510058790826, 1.8364121687579047, 1.361156987949255, 1.0378796781252386, 0.7797287971260183, 0.6187939012968837, 0.45747708565107087, 0.36943349451903296, 0.2551897753131078, 0.2014132788853705, 0.11032705254999144, 0.07010822916614512])

quadrature2 = ([13.2280283769547, 3.2875928670840473, 1.4468055009938108, 0.8025703968469317, 0.5044264210277019, 0.3425198515983215, 0.2449462838838639, 0.18167080959980253, 0.13834530656683147, 0.10741321158466903, 0.08458784602370699, 0.06729081014030694, 0.05389600366576519, 0.04333705436951345, 0.03489140223506237, 0.02805570901075809, 0.02247098218221217, 0.017875979431674797, 0.014077324133424196, 0.010929829375592174, 0.008323244658954298, 0.00617315180991432, 0.004414607178630666, 0.0029976435266986503, 0.0018840597680029405, 0.001045123615199695, 0.00045993851940390087, 0.00011430959721282147], [31.2312268366173, 2.996732204418887, 1.0443546128505232, 0.39472187463497493, 0.2196534208997657, 0.11910835747375746, 0.07895063535150922, 0.050684865458401375, 0.03675139248841183, 0.026035044505953737, 0.019900172829375368, 0.015038862106258181, 0.011875558338787957, 0.009392099048304804, 0.007561739266628158, 0.006181853689180883, 0.0050220528141338245, 0.004205510565725808, 0.00341209200368743, 0.002903506155589857, 0.002322126139283274, 0.0019897189285187637, 0.0015351419997553623, 0.001305329435234394, 0.0009266222707343315, 0.0007544066343285809, 0.0004192467342748908, 0.0002698836786875617])

freq = quadrature2[0]

z_point = 14.971716452318702

D = np.asarray([20.84113802, 21.37556468, 21.72567628, 21.76080076, 21.76159854, 21.92121217, 21.95921956, 22.00527109, 22.00964324
, 22.86001061, 23.19878844, 23.20268008, 23.23733737, 23.23750595, 23.85522352, 23.85524331, 24.45135425, 24.74956141
, 24.77708219, 25.01902481, 20.83848372, 21.37291038, 21.72302197, 21.75814645, 21.75894423, 21.91855786, 21.95656526
, 22.00261678, 22.00698893, 22.8573563, 23.19613413, 23.20002577, 23.23468306, 23.23485164, 23.85256921, 23.852589
, 24.44869995, 24.74690711, 24.77442788, 25.0163705, 2.0316466, 2.56607326, 2.91618486, 2.95130933, 2.95210712
, 3.11172075, 3.14972814, 3.19577966, 3.20015181, 4.05051919, 4.38929702, 4.39318866, 4.42784595, 4.42801453
, 5.0457321, 5.04575188, 5.64186283, 5.94006999, 5.96759077, 6.20953338, 1.16868805, 1.70311471, 2.0532263
, 2.08835078, 2.08914857, 2.2487622, 2.28676959, 2.33282111, 2.33719326, 3.18756063, 3.52633846, 3.5302301
, 3.56488739, 3.56505598, 4.18277355, 4.18279333, 4.77890428, 5.07711144, 5.10463221, 5.34657483, 1.00697704
, 1.5414037, 1.8915153, 1.92663978, 1.92743756, 2.08705119, 2.12505858, 2.17111011, 2.17548225, 3.02584963
, 3.36462746, 3.3685191, 3.40317639, 3.40334497, 4.02106254, 4.02108233, 4.61719327, 4.91540043, 4.94292121
, 5.18486383, 0.93500712, 1.46943378, 1.81954537, 1.85466985, 1.85546764, 2.01508127, 2.05308866, 2.09914018
, 2.10351233, 2.9538797, 3.29265754, 3.29654917, 3.33120647, 3.33137505, 3.94909262, 3.9491124, 4.54522335
, 4.84343051, 4.87095129, 5.1128939, 0.91586535, 1.45029201, 1.80040361, 1.83552808, 1.83632587, 1.9959395
, 2.03394689, 2.07999841, 2.08437056, 2.93473794, 3.27351577, 3.27740741, 3.3120647, 3.31223328, 3.92995085
, 3.92997063, 4.52608158, 4.82428874, 4.85180952, 5.09375213, 0.50151856, 1.03594522, 1.38605682, 1.4211813
, 1.42197908, 1.58159271, 1.6196001, 1.66565162, 1.67002377, 2.52039115, 2.85916898, 2.86306062, 2.89771791
, 2.89788649, 3.51560406, 3.51562384, 4.11173479, 4.40994195, 4.43746273, 4.67940534])
#
integral = np.zeros((len(freq), len(D)))
for i in range(len(freq)):
        sinc = np.sin(freq[i]*z_point)/z_point
        exp = np.multiply(np.exp(-D*freq[i]), 1)
        res = np.dot(sinc, exp.T)
        print(res)
        integral[i] = res


# print(freq[10:])
# plt.plot(freq[1:], integral[:][1:], marker = '.')
# plt.show()
my_calc = np.sum(integral, axis=0)
actual = (1/ (D ** 2 + z_point ** 2))
# print('break')
# print(my_calc)
# print('')
# print(actual)

print(my_calc-actual)

import scipy.integrate as integrate


def eval_contrib(freq, D, z_point):
        sinc = np.sin(freq * z_point) / z_point
        exp = np.exp(-D * freq)
        res = np.dot(sinc, exp.T)
        return res

quad = np.zeros((len(D)))
for i in range(len(D)):
        quad[i] = integrate.quad(eval_contrib, 0, np.inf, args=(D[i],z_point))[0]
print(quad-actual)
