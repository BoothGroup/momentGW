:py:mod:`momentGW.uhf.rpa`
==========================

.. py:module:: momentGW.uhf.rpa

.. autoapi-nested-parse::

   Construct RPA moments with unrestricted references.



Module Contents
---------------

.. py:class:: dRPA(gw, nmom_max, integrals, mo_energy=None, mo_occ=None)


   Bases: :py:obj:`momentGW.uhf.tda.dTDA`, :py:obj:`momentGW.rpa.dRPA`

   Compute the self-energy moments using dRPA and numerical integration
   with unrestricted references.

   :param gw: GW object.
   :type gw: BaseUGW
   :param nmom_max: Maximum moment number to calculate.
   :type nmom_max: int
   :param integrals: Integrals object.
   :type integrals: UIntegrals
   :param mo_energy: Molecular orbital energies for each spin. Keys are "g" and "w"
                     for the Green's function and screened Coulomb interaction,
                     respectively. If `None`, use `gw.mo_energy` for both. Default
                     value is `None`.
   :type mo_energy: dict, optional
   :param mo_occ: Molecular orbital occupancies for each spin. Keys are "g" and
                  "w" for the Green's function and screened Coulomb interaction,
                  respectively. If `None`, use `gw.mo_occ` for both. Default
                  value is `None`.
   :type mo_occ: dict, optional

   .. py:property:: nov

      Get the number of ov states in the screened Coulomb interaction.

   .. py:property:: nmo

      Get the number of MOs.

   .. py:property:: naux

      Get the number of auxiliaries.

   .. py:method:: integrate()

      Optimise the quadrature and perform the integration.

      :returns: **integrals** -- Integral array, include the offset part, for each spin
                channel.
      :rtype: : tuple of numpy.ndarray


   .. py:method:: build_dd_moments(integral=None)

      Build the moments of the density-density response.

      :param integral: Integral array, include the offset part, for each spin
                       channel. If `None`, calculate from scratch. Default value is
                       `None`.
      :type integral: tuple of numpy.ndarray, optional

      :returns: **moments** -- Moments of the density-density response.
      :rtype: tuple of numpy.ndarray


   .. py:method:: build_dd_moments_exact()
      :abstractmethod:

      Build the exact moments of the density-density response.

      .. rubric:: Notes

      Placeholder for future implementation.


   .. py:method:: kernel(exact=False)

      Run the polarizability calculation to compute moments of the
      self-energy.

      :param exact: Has no effect and is only present for compatibility with
                    `dRPA`. Default value is `False`.
      :type exact: bool, optional

      :returns: * **moments_occ** (*numpy.ndarray*) -- Moments of the occupied self-energy for each spin channel.
                * **moments_vir** (*numpy.ndarray*) -- Moments of the virtual self-energy for each spin channel.


   .. py:method:: convolve(eta, eta_orders=None, mo_energy_g=None, mo_occ_g=None)

      Handle the convolution of the moments of the Green's function
      and screened Coulomb interaction.

      :param eta: Moments of the density-density response partly transformed
                  into moments of the screened Coulomb interaction, for each
                  spin channel.
      :type eta: numpy.ndarray
      :param mo_energy_g: Energies of the Green's function for each spin channel. If
                          `None`, use `self.mo_energy_g`. Default value is `None`.
      :type mo_energy_g: numpy.ndarray, optional
      :param eta_orders: List of orders for the rotated density-density moments in
                         `eta`. If `None`, assume it spans all required orders.
                         Default value is `None`.
      :type eta_orders: list, optional
      :param mo_occ_g: Occupancies of the Green's function for each spin channel.
                       If `None`, use `self.mo_occ_g`. Default value is `None`.
      :type mo_occ_g: numpy.ndarray, optional

      :returns: * **moments_occ** (*numpy.ndarray*) -- Moments of the occupied self-energy for each spin channel.
                * **moments_vir** (*numpy.ndarray*) -- Moments of the virtual self-energy for each spin channel.


   .. py:method:: build_se_moments(moments_dd)

      Build the moments of the self-energy via convolution.

      :param moments_dd: Moments of the density-density response for each spin
                         channel.
      :type moments_dd: numpy.ndarray

      :returns: * **moments_occ** (*numpy.ndarray*) -- Moments of the occupied self-energy for each spin channel.
                * **moments_vir** (*numpy.ndarray*) -- Moments of the virtual self-energy for each spin channel.


   .. py:method:: build_dp_moments()
      :abstractmethod:

      Build the moments of the dynamic polarizability for optical
      spectra calculations.

      .. rubric:: Notes

      Placeholder for future implementation.


   .. py:method:: build_dd_moment_inv()
      :abstractmethod:

      Build the first inverse (`n=-1`) moment of the density-density
      response.

      .. rubric:: Notes

      Placeholder for future implementation.


   .. py:method:: mpi_slice(n)

      Return the start and end index for the current process for total
      size `n`.

      :param n: Total size.
      :type n: int

      :returns: * **p0** (*int*) -- Start index for current process.
                * **p1** (*int*) -- End index for current process.


   .. py:method:: mpi_size(n)

      Return the number of states in the current process for total size
      `n`.

      :param n: Total size.
      :type n: int

      :returns: **size** -- Number of states in current process.
      :rtype: int


   .. py:method:: rescale_quad(bare_quad, a)
      :staticmethod:

      Rescale quadrature for grid space `a`.

      :param bare_quad: The quadrature points and weights.
      :type bare_quad: tuple
      :param a: Grid spacing.
      :type a: float

      :returns: * **points** (*numpy.ndarray*) -- The quadrature points.
                * **weights** (*numpy.ndarray*) -- The quadrature weights.


   .. py:method:: optimise_offset_quad(d, diag_eri, name='offset')

      Optimise the grid spacing of Gauss-Laguerre quadrature for the
      offset integral.

      :param d: Orbital energy differences.
      :type d: numpy.ndarray
      :param diag_eri: Diagonal of the ERIs.
      :type diag_eri: numpy.ndarray
      :param name: Name of the integral. Default value is `"offset"`.
      :type name: str, optional

      :returns: * **points** (*numpy.ndarray*) -- The quadrature points.
                * **weights** (*numpy.ndarray*) -- The quadrature weights.


   .. py:method:: optimise_main_quad(d, diag_eri, name='main')

      Optimise the grid spacing of Clenshaw-Curtis quadrature for the
      main integral.

      :param d: Orbital energy differences.
      :type d: numpy.ndarray
      :param diag_eri: Diagonal of the ERIs.
      :type diag_eri: numpy.ndarray
      :param name: Name of the integral. Default value is `"main"`.
      :type name: str, optional

      :returns: * **points** (*numpy.ndarray*) -- The quadrature points.
                * **weights** (*numpy.ndarray*) -- The quadrature weights.


   .. py:method:: get_optimal_quad(bare_quad, integrand, exact, name=None)

      Get the optimal quadrature.

      :param bare_quad: The quadrature points and weights.
      :type bare_quad: tuple
      :param integrand: The integrand function.
      :type integrand: function
      :param exact: The exact value of the integral.
      :type exact: float
      :param name: Name of the integral. Default value is `None`.
      :type name: str, optional

      :returns: * **points** (*numpy.ndarray*) -- The quadrature points.
                * **weights** (*numpy.ndarray*) -- The quadrature weights.


   .. py:method:: eval_diag_offset_integral(quad, d, diag_eri)

      Evaluate the diagonal of the offset integral.

      :param quad: The quadrature points and weights.
      :type quad: tuple
      :param d: Orbital energy differences.
      :type d: numpy.ndarray
      :param diag_eri: Diagonal of the ERIs.
      :type diag_eri: numpy.ndarray

      :returns: **integral** -- Offset integral.
      :rtype: numpy.ndarray


   .. py:method:: eval_diag_main_integral(quad, d, diag_eri)

      Evaluate the diagonal of the main integral.

      :param quad: The quadrature points and weights.
      :type quad: tuple
      :param d: Orbital energy differences.
      :type d: numpy.ndarray
      :param diag_eri: Diagonal of the ERIs.
      :type diag_eri: numpy.ndarray

      :returns: **integral** -- Main integral.
      :rtype: numpy.ndarray


   .. py:method:: eval_offset_integral(quad, d, Lia=None)

      Evaluate the offset integral.

      :param quad: The quadrature points and weights.
      :type quad: tuple
      :param d: Orbital energy differences.
      :type d: numpy.ndarray
      :param Lia: The ``(aux, W occ, W vir)`` integral array. If `None`, use
                  `self.integrals.Lia`. Keyword argument allows for the use of
                  this function with `uhf` and `pbc` modules.
      :type Lia: numpy.ndarray, optional

      :returns: **integral** -- Offset integral.
      :rtype: numpy.ndarray


   .. py:method:: eval_main_integral(quad, d, Lia=None)

      Evaluate the main integral.

      :param quad: The quadrature points and weights.
      :type quad: tuple
      :param d: Orbital energy differences.
      :type d: numpy.ndarray
      :param Lia: The (aux, W occ, W vir) integral array. If `None`, use
                  `self.integrals.Lia`. Keyword argument allows for the use of
                  this function with `uhf` and `pbc` modules.
      :type Lia: numpy.ndarray

      :returns: **integral** -- Offset integral.
      :rtype: numpy.ndarray


   .. py:method:: gen_clencur_quad_inf(even=False)

      Generate quadrature points and weights for Clenshaw-Curtis
      quadrature over an ``(-inf, +inf)``.

      :param even: Whether to assume an even grid. Default is `False`.
      :type even: bool, optional

      :returns: * **points** (*numpy.ndarray*) -- Quadrature points.
                * **weights** (*numpy.ndarray*) -- Quadrature weights.


   .. py:method:: gen_gausslag_quad_semiinf()

      Generate quadrature points and weights for Gauss-Laguerre
      quadrature over an ``(0, +inf)``.

      :returns: * **points** (*numpy.ndarray*) -- Quadrature points.
                * **weights** (*numpy.ndarray*) -- Quadrature weights.


   .. py:method:: estimate_error_clencur(i4, i2, imag_tol=1e-10)

      Estimate the quadrature error for Clenshaw-Curtis quadrature.

      :param i4: Integral at one-quarter the number of points.
      :type i4: numpy.ndarray
      :param i2: Integral at one-half the number of points.
      :type i2: numpy.ndarray
      :param imag_tol: Threshold to consider the imaginary part of a root to be zero.
                       Default value is `1e-10`.
      :type imag_tol: float, optional

      :returns: **error** -- Estimated error.
      :rtype: numpy.ndarray



